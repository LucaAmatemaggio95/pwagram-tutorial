
var deferredPrompt;
var enableNotificationsButtons = document.querySelectorAll('.enable-notifications');

if (!window.Promise) {
  window.Promise = Promise;
}

if ('serviceWorker' in navigator) {
  navigator.serviceWorker
    .register('/sw.js')
    //.register('/service-worker.js')// new service worker generated by workbox
    .then(function () {
      console.log('Service worker registered!');
    })
    .catch(function(err) {
      console.log(err);
    });
}

window.addEventListener('beforeinstallprompt', function(event) {
  console.log('beforeinstallprompt fired');
  event.preventDefault();
  deferredPrompt = event;
  return false;
});

// WEB PUSH NOTIFICATION

function displayConfirmNotification() {

  var options = {
    body: 'You are now subscribed',
    icon: '/src/images/icons/app-icon-96x96.png',
    image: '/src/images/sf-boat.jpg',
    dir: 'ltr',// direction of text,
    lang: 'en-US',// BCP 47
    vibrate: [100,50,200],// pattern: vibration in ms, pause, vibration, pause and so on
    badge: '/src/images/icons/app-icon-96x96.png',//icon badge on Android notification bar -> masked automatically by Android
    tag: 'confirm-notification',// virtual id
    renotify: true,// a new notification will alert the user even if the first notification already showed up
    actions: [
      {
        action: 'confirm',// action-id
        title: 'Ok',
        icon: '/src/images/icons/app-icon-96x96.png'
      },
      {
        action: 'cancel',// action-id
        title: 'Cancel',
        icon: '/src/images/icons/app-icon-96x96.png'
      }
    ],//specify multiple actions
  };

  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
    .then(swreg => {// get the sw registration class
      swreg.showNotification('Successfully subscribed', options);
    })
  }

  // new Notification('Successfully subscribed', options);

}

function configurePushSub () {

  if (!('serviceWorker' in navigator)) {
    return;
  }

  var reg;

  navigator.serviceWorker.ready
  .then(swreg => {
    reg = swreg;
    return swreg.pushManager.getSubscription();// get all the current subscription or null as a Promise
  })
  .then(sub => {
    if (sub === null) {
      // Create a new subscription
      var vapidPublic = 'BOQRUWsZxL5GTkKWd9W_VJLSYihh1G-El6jyWEoYeg78jYS23USRiSrODV3PPfjiZSUJvsIo7Du86mum7JRpD30';
      var convertedVapidPublic = urlBase64ToUint8Array(vapidPublic);
      return reg.pushManager.subscribe({
        userVisibleOnly: true,// notification visible only to this user
        applicationServerKey: convertedVapidPublic
      });
    } else {
      // Use the existing subscription
    }
  })
  .then(newSub => {// get the newly created subscription and post it to the DB

    return fetch('https://pwagram-9885e-default-rtdb.europe-west1.firebasedatabase.app/subscriptions.json',
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(newSub)
    })

  })
  .then(res => {// if the new Sub is posted display the confirm message
    if (res.ok) {
      displayConfirmNotification();
    }
  })
  .catch(err => {// if anything bad happens in one of the blocks above, console.log the error
    console.log(err);
  });

}

// Private key: xzDK5YLXKxF8pHckSV0-qxKEux14T32GxKz7qwQmyV8

function askForNotificationPermission () {

  Notification.requestPermission((result) => {
    
    console.log(result);
    
    if (result != 'granted') {
      console.log('No notification permission granted');
    } else {
      // hide the button
      configurePushSub();
      // displayConfirmNotification();
    }

  })

}

if ('Notification' in window && 'serviceWorker' in navigator) {

  for (let index = 0; index < enableNotificationsButtons.length; index++) {
    enableNotificationsButtons[index].style.display = 'inline-block';
    enableNotificationsButtons[index].addEventListener('click', askForNotificationPermission);
  }

}